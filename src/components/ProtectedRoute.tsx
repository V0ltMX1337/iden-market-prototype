// components/ProtectedRoute.tsx
import { Navigate } from "react-router-dom";
import { useAuth } from "@/hooks/useAuth";

interface ProtectedRouteProps {
  children: React.ReactNode;
  requireAdmin?: boolean;
  requireModerator?: boolean;
}

const ProtectedRoute = ({
  children,
  requireAdmin = false,
  requireModerator = false,
}: ProtectedRouteProps) => {
  const { user, isAdmin, isModerator, isLoading } = useAuth();

  if (isLoading) {
  console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
  return null;
}

if (!user) {
  console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /avito/login");
  return <Navigate to="/avito/login" replace />;
}

if (requireAdmin && !isAdmin()) {
  console.log("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω.");
  return <Navigate to="/avito" replace />;
}

  // üîß –ø–æ–∫–∞ –≥—Ä—É–∑–∏—Ç—Å—è - –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  if (isLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  if (!user) return <Navigate to="/avito/login" replace />;
  if (requireAdmin && !isAdmin()) return <Navigate to="/avito" replace />;
  if (requireModerator && !isModerator()) return <Navigate to="/avito" replace />;

  return <>{children}</>;
};

export default ProtectedRoute;
