import { useState, useEffect, useRef } from 'react';

interface OnlineStatusConfig {
  heartbeatInterval?: number; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ heartbeat –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫—É–Ω–¥)
  apiEndpoint?: string; // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  userId?: string; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

interface OnlineUser {
  id: string;
  lastSeen: Date;
  isOnline: boolean;
}

export const useOnlineStatus = (config: OnlineStatusConfig = {}) => {
  const {
    heartbeatInterval = 30000, // 30 —Å–µ–∫—É–Ω–¥
    apiEndpoint = '/api/user/online-status',
    userId
  } = config;

  const [isOnline, setIsOnline] = useState<boolean>(navigator.onLine);
  const [lastActiveTime, setLastActiveTime] = useState<Date>(new Date());
  const heartbeatIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const activityTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastActivityRef = useRef<Date>(new Date());

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  const sendOnlineStatus = async (online: boolean, lastActivity?: Date) => {
    if (!userId || !apiEndpoint) return;

    try {
      /* 
      // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ API
      const response = await fetch(`${apiEndpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${getAuthToken()}` // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ useAuth
        },
        body: JSON.stringify({
          userId,
          isOnline: online,
          lastActivity: lastActivity?.toISOString() || new Date().toISOString(),
          userAgent: navigator.userAgent,
          timestamp: Date.now()
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('Online status updated:', result);
      */
      
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      console.log('üì° [Online Status] Sending to server:', {
        userId,
        isOnline: online,
        lastActivity: lastActivity?.toISOString() || new Date().toISOString(),
        timestamp: Date.now()
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUserActivity = () => {
    const now = new Date();
    lastActivityRef.current = now;
    setLastActiveTime(now);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (activityTimeoutRef.current) {
      clearTimeout(activityTimeoutRef.current);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activityTimeoutRef.current = setTimeout(() => {
      setIsOnline(false);
      sendOnlineStatus(false, lastActivityRef.current);
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –æ—Ñ—Ñ–ª–∞–π–Ω–∞
    if (!isOnline && navigator.onLine) {
      setIsOnline(true);
      sendOnlineStatus(true, now);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
  const handleOnline = () => {
    setIsOnline(true);
    sendOnlineStatus(true);
  };

  const handleOffline = () => {
    setIsOnline(false);
    sendOnlineStatus(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏/–±—Ä–∞—É–∑–µ—Ä–∞
  const handleBeforeUnload = () => {
    sendOnlineStatus(false, lastActivityRef.current);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
  const handleVisibilityChange = () => {
    if (document.hidden) {
      // –í–∫–ª–∞–¥–∫–∞ —Å–∫—Ä—ã—Ç–∞
      sendOnlineStatus(false, lastActivityRef.current);
    } else {
      // –í–∫–ª–∞–¥–∫–∞ –≤–∏–¥–∏–º–∞
      if (navigator.onLine) {
        setIsOnline(true);
        handleUserActivity();
      }
    }
  };

  useEffect(() => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    window.addEventListener('beforeunload', handleBeforeUnload);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    // –°–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
    activityEvents.forEach(event => {
      document.addEventListener(event, handleUserActivity, { passive: true });
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
    if (userId && apiEndpoint) {
      heartbeatIntervalRef.current = setInterval(() => {
        if (isOnline) {
          sendOnlineStatus(true, lastActivityRef.current);
        }
      }, heartbeatInterval);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –æ–Ω–ª–∞–π–Ω –ø—Ä–∏ –º–∞—É–Ω—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    if (navigator.onLine && userId) {
      handleUserActivity();
    }

    // Cleanup
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      document.removeEventListener('visibilitychange', handleVisibilityChange);

      activityEvents.forEach(event => {
        document.removeEventListener(event, handleUserActivity);
      });

      if (heartbeatIntervalRef.current) {
        clearInterval(heartbeatIntervalRef.current);
      }

      if (activityTimeoutRef.current) {
        clearTimeout(activityTimeoutRef.current);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–ª–∞–π–Ω –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (userId) {
        sendOnlineStatus(false, lastActivityRef.current);
      }
    };
  }, [userId, apiEndpoint, heartbeatInterval, isOnline]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
  const getUsersOnlineStatus = async (userIds: string[]): Promise<OnlineUser[]> => {
    try {
      /*
      // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ API
      const response = await fetch(`${apiEndpoint}/bulk`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${getAuthToken()}`
        },
        body: JSON.stringify({ userIds })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
      */

      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
      console.log('üì° [Online Status] Requesting users status:', userIds);
      return userIds.map(id => ({
        id,
        lastSeen: new Date(),
        isOnline: Math.random() > 0.5 // –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–µ–º–æ
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return [];
    }
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  const updateOnlineStatus = (online: boolean) => {
    setIsOnline(online);
    sendOnlineStatus(online, lastActivityRef.current);
  };

  return {
    isOnline,
    lastActiveTime,
    updateOnlineStatus,
    getUsersOnlineStatus,
    sendOnlineStatus: () => sendOnlineStatus(isOnline, lastActivityRef.current)
  };
};

export default useOnlineStatus;