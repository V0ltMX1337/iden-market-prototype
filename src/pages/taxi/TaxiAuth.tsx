import React, { useState } from 'react';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import Icon from '@/components/ui/icon';
import { useTaxiAuth, type UserRole } from '@/contexts/TaxiAuthContext';

const TaxiAuth = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { login, register, isLoading } = useTaxiAuth();
  
  const initialMode = searchParams.get('mode') === 'register' ? 'register' : 'login';
  const initialRole = (searchParams.get('role') as UserRole) || 'client';
  
  const [mode, setMode] = useState<'login' | 'register'>(initialMode);
  const [role, setRole] = useState<UserRole>(initialRole);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    phone: '',
    name: '',
    carModel: '',
    carNumber: '',
    carColor: ''
  });
  const [errors, setErrors] = useState<Record<string, string>>({});

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrors({});

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const newErrors: Record<string, string> = {};
    
    if (!formData.email) newErrors.email = '–í–≤–µ–¥–∏—Ç–µ email';
    if (!formData.password) newErrors.password = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
    
    if (mode === 'register') {
      if (!formData.name) newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
      if (!formData.phone) newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
      if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
      }
      if (role === 'driver') {
        if (!formData.carModel) newErrors.carModel = '–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è';
        if (!formData.carNumber) newErrors.carNumber = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è';
      }
    }

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    try {
      if (mode === 'login') {
        await login(formData.email, formData.password);
      } else {
        await register({
          email: formData.email,
          password: formData.password,
          phone: formData.phone,
          name: formData.name,
          role,
          carModel: formData.carModel || undefined,
          carNumber: formData.carNumber || undefined,
          carColor: formData.carColor || undefined
        });
      }
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
      const redirectPath = role === 'client' ? '/migalki/order' : `/migalki/dashboard/${role}`;
      navigate(redirectPath);
    } catch (error) {
      setErrors({ form: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const getRoleLabel = (roleValue: UserRole) => {
    switch (roleValue) {
      case 'client': return '–ö–ª–∏–µ–Ω—Ç';
      case 'driver': return '–í–æ–¥–∏—Ç–µ–ª—å';
      case 'manager': return '–ú–µ–Ω–µ–¥–∂–µ—Ä';
      case 'admin': return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      default: return roleValue;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-white to-orange-50 flex items-center justify-center p-4">
      {/* Header */}
      <div className="absolute top-6 left-6">
        <Link to="/migalki" className="flex items-center space-x-2">
          <div className="w-8 h-8 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-lg flex items-center justify-center">
            <Icon name="Car" className="text-white" size={16} />
          </div>
          <span className="text-lg font-semibold text-gray-800">–ú–∏–≥–∞–ª–∫–∏</span>
        </Link>
      </div>

      <Card className="w-full max-w-md border-none shadow-xl bg-white/90 backdrop-blur-sm">
        <CardHeader className="text-center space-y-2">
          <CardTitle className="text-2xl font-bold text-gray-800">
            {mode === 'login' ? '–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}
          </CardTitle>
          <p className="text-gray-600">
            {mode === 'login' 
              ? '–í–æ–π–¥–∏—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É'
              : `–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç ${getRoleLabel(role).toLowerCase()}`
            }
          </p>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ */}
          <div className="flex bg-gray-100 p-1 rounded-lg">
            <button
              type="button"
              onClick={() => setMode('login')}
              className={`flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all ${
                mode === 'login'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              –í—Ö–æ–¥
            </button>
            <button
              type="button"
              onClick={() => setMode('register')}
              className={`flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all ${
                mode === 'register'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </button>
          </div>

          {/* –í—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
          {mode === 'register' && (
            <div className="space-y-2">
              <Label>–†–æ–ª—å</Label>
              <Select value={role} onValueChange={(value: UserRole) => setRole(value)}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="client">üë§ –ö–ª–∏–µ–Ω—Ç</SelectItem>
                  <SelectItem value="driver">üöó –í–æ–¥–∏—Ç–µ–ª—å</SelectItem>
                  <SelectItem value="manager">üëî –ú–µ–Ω–µ–¥–∂–µ—Ä</SelectItem>
                  <SelectItem value="admin">‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</SelectItem>
                </SelectContent>
              </Select>
            </div>
          )}

          {/* –§–æ—Ä–º–∞ */}
          <form onSubmit={handleSubmit} className="space-y-4">
            {/* –ò–º—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) */}
            {mode === 'register' && (
              <div className="space-y-2">
                <Label htmlFor="name">–ü–æ–ª–Ω–æ–µ –∏–º—è</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                  className={errors.name ? 'border-red-500' : ''}
                />
                {errors.name && (
                  <p className="text-sm text-red-600">{errors.name}</p>
                )}
              </div>
            )}

            {/* Email */}
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                placeholder="ivan@example.com"
                className={errors.email ? 'border-red-500' : ''}
              />
              {errors.email && (
                <p className="text-sm text-red-600">{errors.email}</p>
              )}
            </div>

            {/* –¢–µ–ª–µ—Ñ–æ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) */}
            {mode === 'register' && (
              <div className="space-y-2">
                <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                <Input
                  id="phone"
                  value={formData.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  placeholder="+7 (900) 123-45-67"
                  className={errors.phone ? 'border-red-500' : ''}
                />
                {errors.phone && (
                  <p className="text-sm text-red-600">{errors.phone}</p>
                )}
              </div>
            )}

            {/* –ü–∞—Ä–æ–ª—å */}
            <div className="space-y-2">
              <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
              <Input
                id="password"
                type="password"
                value={formData.password}
                onChange={(e) => handleInputChange('password', e.target.value)}
                className={errors.password ? 'border-red-500' : ''}
              />
              {errors.password && (
                <p className="text-sm text-red-600">{errors.password}</p>
              )}
            </div>

            {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) */}
            {mode === 'register' && (
              <div className="space-y-2">
                <Label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
                <Input
                  id="confirmPassword"
                  type="password"
                  value={formData.confirmPassword}
                  onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                  className={errors.confirmPassword ? 'border-red-500' : ''}
                />
                {errors.confirmPassword && (
                  <p className="text-sm text-red-600">{errors.confirmPassword}</p>
                )}
              </div>
            )}

            {/* –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π) */}
            {mode === 'register' && role === 'driver' && (
              <>
                <div className="space-y-2">
                  <Label htmlFor="carModel">–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è</Label>
                  <Input
                    id="carModel"
                    value={formData.carModel}
                    onChange={(e) => handleInputChange('carModel', e.target.value)}
                    placeholder="Toyota Camry"
                    className={errors.carModel ? 'border-red-500' : ''}
                  />
                  {errors.carModel && (
                    <p className="text-sm text-red-600">{errors.carModel}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="carNumber">–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è</Label>
                  <Input
                    id="carNumber"
                    value={formData.carNumber}
                    onChange={(e) => handleInputChange('carNumber', e.target.value)}
                    placeholder="–ê123–í–°52"
                    className={errors.carNumber ? 'border-red-500' : ''}
                  />
                  {errors.carNumber && (
                    <p className="text-sm text-red-600">{errors.carNumber}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="carColor">–¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è</Label>
                  <Input
                    id="carColor"
                    value={formData.carColor}
                    onChange={(e) => handleInputChange('carColor', e.target.value)}
                    placeholder="–ë–µ–ª—ã–π"
                  />
                </div>
              </>
            )}

            {/* –û–±—â–∏–µ –æ—à–∏–±–∫–∏ */}
            {errors.form && (
              <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-sm text-red-600">{errors.form}</p>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <Button
              type="submit"
              size="lg"
              disabled={isLoading}
              className="w-full bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600"
            >
              {isLoading ? (
                <Icon name="Loader2" className="animate-spin mr-2" size={20} />
              ) : (
                <Icon name={mode === 'login' ? 'LogIn' : 'UserPlus'} className="mr-2" size={20} />
              )}
              {mode === 'login' ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
            </Button>
          </form>

          {/* –°—Å—ã–ª–∫–∏ */}
          <div className="text-center space-y-2">
            {mode === 'login' ? (
              <p className="text-sm text-gray-600">
                –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
                <button
                  onClick={() => setMode('register')}
                  className="font-medium text-yellow-600 hover:text-yellow-500"
                >
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å
                </button>
              </p>
            ) : (
              <p className="text-sm text-gray-600">
                –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
                <button
                  onClick={() => setMode('login')}
                  className="font-medium text-yellow-600 hover:text-yellow-500"
                >
                  –í–æ–π—Ç–∏
                </button>
              </p>
            )}
            
            <p className="text-xs text-gray-500">
              –ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{' '}
              <a href="#" className="underline hover:text-gray-700">
                —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
              </a>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default TaxiAuth;